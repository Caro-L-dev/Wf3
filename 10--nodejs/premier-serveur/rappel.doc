Quelle version de Javascript :

- ES pour Ecmascript Edition :
Les fonctionnalités sont différentes selon la version utilisée.
Es6 = 2015, puis ES2016, Es2017 etc.

1. LE POINT VIRGULE :
Non obligatoire depuis Es6 (l'insertion est dite automatique),
mais fortement conseillée car si on laisse la soin exclusif à Js,
ce dernier pourrait se tromper et mal interpréter notre code.

Exemple :

const a = 1;
const b = 2;
const c = 3;
(a+b)toString();

Pour Js, c'est comme si vous aviez écrit const c = 3(a+b)toString();

2. LES VARIABLES ET CONSTANTES :
Faire attention aux portées de variables.

Depuis Es, apparition de LET.

La variable LET n'est pas affectée après une utilisation en locale contrairement à VAR.

Les constantes : const valeur immuable, cependant il est possible de modifier sa valeur.

const languages = ["JS", "PHP", "PYTHON"];
        languages = ["JS", "PHP", "PYTHON"]; // Erreur car "=" signifie nouvelle assignation.
        languages.push("C++"); // "ok" car on ajoute un élèment à l'intérieur du tableau mais en
        soit l'objet "languages" reste toujours un tableau.

        JS donne cette opportunité, c'est pour ça qu'il est possible de modifier des constantes
        dans REACT par exemple.


3. LES BOUCLES

La constantes FOR OF (Foreach amélioré / plus intuitif / plus court) qui existe depuis ES6 :

const tabs = ["JS", "PHP", "PYRHON", "Ruby", "C"];

for (const tab of tabs) { // On aurait pu faire le traitement avec LET.
    console.log(tab);
}

4. LES FONCTIONS 

Les fonctions anonyme (quand elle n'a pas de nom /  tout est mis dans une constante.) :

const sum = function(a,b){
    return a + b;
};

// La fonction anonyme peut etre passée dans une variable ou une constante.
La const est privilégiée car aucune définition. Elle n'a pas vocation à changer tout comme une fonction.

const res = sum(2,5);

LES FONCTIONS FLECHEES : depuis ES6

const sum = (a,b) {
    return a + b;
};

// Meme résultat que la fonction anonyme,
c'est simplement une syntaxe améliorée de cette derniere.

const sum = a => { // un seul paramètre
    return a + 10;
}

const sum = (a+b) => a + b; // Les crochets et le return ne sont pas obligatoires si une seule instruction (simple).

5. LES OBJETS 

Objet classique :

const pc = {
    ram: 16,
    stockage: 512,
    processeur: "Intel Core i7",
    type: "Portable",
    année: 2019,
    logiciels : ["VScode", "Firefox", "Node.Js", "Terminal"],
        upgrade: function(){ // Méthode (fonction anonyme)
            this.ram *= 2; // Mise à jour sur notre pc qui va doubler nos rams.
            this.stockage *= 2; // Le "this" représente l'objet "PC" tout entier à partir duquel on va éditer la fonction.
            }
}; 

console.log(pc);
console.log(pc.stockage);
console.log(pc.logiciels);

pc.upgrade();
console.log(pc);

6. LE JSON :

console.log(JSON.stringify(pc)); // Notre objet est traduit en chaine de caracteres.
// ATTENTION : Il ne s'agit pas d'un nouvel objet mais bel et bien d'une chaine de caracteres.
// A SAVOIR : Les fonctions ne peuvent pas etre transportées en JSON.

const pcJson = JSON.stringify(pc); // Meilleure syntaxe, lorsqu'on met notre JSON.stringify dans une constante.
console.log(pcJson);
console.log(typeof pcJson);

6 - LES CLASSES

class Voiture { //En JS est une classe n'est rien d'autre qu'un TEMPLATE de notre Objet 

    constructor(marque, annee, kilometrage){//méthode preopre à la classe

                this.marque = marque ; //"La marque de l'objet crée prend la marque passée en paramètre
                this.annee = annee;
                this.kilometrage = kilometrage;
    }

    afficherInfo() {

        console.log("====== Informations =======");
        console.log(`>Marque : ${this.marque}`);
        console.log(`>Annee : ${this.annee}`);
        console.log(`>Km : ${this.kilometrage}`);
    }

}


const v1 = new Voiture("Peugeot", 2013 , 250000);

console.log(v1);


v1.marque = "Hyundai";
v1.annee = 2010
v1.kilometrage = 11000
v1.afficherInfo(); 
// .. On peut ainsi modifier le contenu des propriété d'un objet
//san avoir à créer un nouvel objet.

7. LES FONCTIONS ASYNCHRONES 

Le principe des événements :

function hello() {
    console.log("Hello!");
}

setTimeout(hello, 2000); // Cette fonction sera éxécutée après 2 secondes.

// Améliorer le code

setTimeout(() => {
    console.log("Hello!");
}, 2000);

// La subtilité de JS

console.log(" 1 - lancement Timer");

setTimeout(() => {
    console.log("2 - Hello")
}, 2000)

console.log(" 3 - lancement Terminé");

//Normalement l'ordre d'éxécution dévrait être 1 -2 -3
//Mais Node.Js ne va pas perdre le temps et attendre un programme bloqué ou en attente d'instruction, il passe à la suivante
//ASYNCHRONE = pas synchrone.

//Les promesses.

const attendre2secondes = 


            new Promise((resolver, reject) => {
                setTimeout(() => {
                    console.log("Timer exécuté");

                    resolver("résolu")
                }, 2000);
            })


console.log("1 - lancement timer");
attendre2secondes.then((data) => { // Attend d'abord la promesse puis ensuite (THEN) exécute moi l'instruction qui suit (fonction anonyme).
    console.log(data);
    console.log("3 - timer terminé");
});

// Améliorons encore un peu :

function resolveAfter2Seconds() {
    
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve("2 - Timer exécuté");
      }, 2000);
    });
  }



async function main(){

    console.log ("1 - lancement timer");
    

    const x = await resolveAfter2Seconds();

    console.log(x);

    console.log(" 3 - Fin");

}

main();